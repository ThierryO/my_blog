---
title: Creating continuous coloured maps with osmplotr
author: Thierry Onkelinx
date: "2017-07-17"
categories: [reproducible research, maps]
image: index_files/figure-html/osmplotr-1.svg
params:
  cellsize: 20
  scale: 2
knitr: 
  opts_chunk: 
    warning: false
    message: false
    fig.width: 6
    dev: svg
---

During [
useR!2017<!-- spell-check: ignore -->
](https://user2017.brussels/) I attended a talk by
Mark Padgham<!-- spell-check: ignore -->
titled [Maps are data, so why no plot data on a map](https://channel9.msdn.com/Events/useR-international-R-User-conferences/useR-International-R-User-2017-Conference/Maps-are-data-so-why-plot-data-on-a-map).
In this blog post I will recreate the map from an earlier blog post on [estimating densities from a point pattern](../../statistics/point-pattern/index.html).

Let's start by loading all required packages.

```{r}
#| label: setup
library(dplyr)
library(leaflet)
library(MASS)
library(osmplotr)
library(sf)
library(wk)
```

I rearranged the code from the previous blog post in two chunks.
The first chunk calculate the density and is required for both the `leaflet` and the `osmplotr` solution.
See the [earlier blog post](../../statistics/point-pattern/index.html) for the details on what the code does.

```{r}
#| label: calc-density
crs_wgs84 <- st_crs(4326)
crs_lambert <- st_crs(31370)
read.delim("../statistics/data/points.txt", sep = " ") |>
  st_as_sf(coords = c("lon", "lat"), crs = crs_wgs84) |>
  st_transform(crs = crs_lambert) -> points
st_bbox(points) |>
  matrix(nrow = 2) -> bb
bb <- bb / params$cellsize
bb[, 1] <- floor(bb[, 1]) * params$cellsize
bb[, 2] <- ceiling(bb[, 2]) * params$cellsize
apply(bb, 1, diff) -> ranges
coords <- st_coordinates(points)
coords[, "X"] |>
  kde2d(
    y = coords[, "Y"], n = (rev(ranges) / params$cellsize) + 1,
    lims = as.vector(t(bb))
  ) -> dens
```

The second chunk converts the density to a simple features object so we can plot it with `leaflet`.

```{r}
#| label: sf-dens
expand.grid(lon = dens$x, lat = dens$y) |>
  st_as_sf(coords = c("lon", "lat"), crs = crs_lambert) |>
  st_make_grid(
    cellsize = params$cellsize, offset = bb[, 1] - 0.5 * params$cellsize
  ) |>
  st_as_sf() |>
  mutate(
    density = as.vector(t(dens$z)) * params$cellsize ^ 2
  ) |>
  wk_transform(
    wk_affine_scale(params$scale, params$scale)
  ) |>
  wk_transform(
    wk_affine_translate(-bb[1, 1], -bb[2, 1])
  ) |>
  st_set_crs(crs_lambert) |>
  st_transform(crs = crs_wgs84) -> dens_wgs84
```

The next chunk gets the OpenStreetMap background and overlays is with the density map (@fig-density).
The density layer needs to be somewhat transparent in order to see the background image.

```{r}
#| label: fig-density
#| fig-cap: Estimated density (number of points per grid cell)
pal <- colorNumeric(
  palette = rev(rainbow(100, start = 0, end = 0.7)),
  domain = c(0, dens_wgs84$density)
)
leaflet(dens_wgs84) |>
  addTiles() |>
  addPolygons(color = ~pal(density), stroke = FALSE, fillOpacity = 0.5) |>
  addLegend(pal = pal, values = ~density)
```

The `osmplotr` package uses a set of points to create the colours.
`x` and `y` hold the longitude an latitude, `z` the variable for the colour value.

```{r}
#| label: osm-dens
expand.grid(lon = dens$x, lat = dens$y) |>
  mutate(z = as.vector(dens$z) * params$cellsize ^ 2) |>
  st_as_sf(coords = c("lon", "lat"), crs = crs_lambert) |>
  wk_transform(
    wk_affine_scale(params$scale, params$scale)
  ) |>
  wk_transform(
    wk_affine_translate(-bb[1, 1], -bb[2, 1])
  ) |>
  st_set_crs(crs_lambert) |>
  st_transform(crs = crs_wgs84) %>%
  bind_cols(st_coordinates(.)) |>
  st_drop_geometry() |>
  dplyr::select(x = "X", y = "Y", "z") -> dataset
```

The next step is to download the required [OpenStreetMap (OSM)](https://www.openstreetmap.org) data.
Here I selected all roads and paths ("highway" in OSM terminology) and all the buildings. 

```{r}
#| label: extract-osm
#| cache: true
bb_osm <- st_bbox(dens_wgs84)
roads <- extract_osm_objects(key = "highway", bbox = bb_osm)
buildings <- extract_osm_objects(key = "building", bbox = bb_osm)
```

```{r}
#| label: osmplotr
#| fig-cap: "`osmplotr` image of density"
osm_basemap(bbox = matrix(bb_osm, ncol = 2), bg = "gray95") |>
  add_osm_surface(
    buildings, dat = dataset, cols = rainbow(100, end = 0.7), bg = "gray85"
  ) |>
  add_osm_surface(
    roads, dat = dataset, bg = "gray85",
    cols = rainbow(100, end = 0.7) |>
      adjust_colours(-0.2)
  ) |>
  add_colourbar(
    cols = rainbow(100, end = 0.7), zlims = range(dataset$z)
  ) |>
  add_axes()
```

## Pro and contra of `osmplotr` for continuous coloured maps

Note that `osmplotr` can create maps with discrete colours too.
This was outside the scope of this blog post. See the `osmplotr` vignettes on plotting [basic maps](https://cran.r-project.org/web/packages/osmplotr/vignettes/basic-maps.html) and [data maps](https://cran.r-project.org/web/packages/osmplotr/vignettes/data-maps.html) (both categorical and continuous).

Much depends on the kind of data you want to display and the required accuracy.
`osmplotr` uses the objects from OSM.
Each OSM feature will get a uniform colour depending on the location of the centroid.
Unless you data matched with the OSM data, it is not possible to use the accurate location of the data points.

Another point is scale and resolution of the OSM data.
In case of an urban area were all individual buildings are available and the size of the individual buildings is small compared to the size of the map, then the `osmplotr` map works quite well.

## Session info

These R packages were used to create this post.

```{r}
#| label: session-info
sessioninfo::session_info()
```
