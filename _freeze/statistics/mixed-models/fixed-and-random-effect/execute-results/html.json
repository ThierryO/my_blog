{
  "hash": "f4db0a7a50f532608b6ab35844618c40",
  "result": {
    "markdown": "---\ntitle: Using a variable both as fixed and random effect\nauthor: Thierry Onkelinx\ndate: \"2017-08-23\"\ncategories: [statistics, mixed-models]\nimage: fixed-and-random-effect_files/figure-html/fit-discrete-fit2-1.svg\nknitr:\n  opts_chunk: \n    echo: true\n    message: false\n    dev: \"svg\"\n---\n\n\nOne of the questions to answer when using mixed models is whether to use a variable as a fixed effect or as a random effect.\nSometimes it makes sense to use a variable both as fixed and random effect.\nIn this post I will try to make clear in which cases it can make sense and what are the benefits of doing so.\nI will also handle cases in which it doesn't make sense.\nMuch will depend on the nature of the variable.\nTherefore this post is split into three sections: categorical, discrete and continuous.\nI will only display the most relevant parts of the code.\nThe full code is available on [GitHub](https:/github.com/thierryo/my_blog).\n\n# Categorical variable\n\nTo make this clear, we start by creating a dummy dataset with 3 categorical covariates.\n`B` is nested within `A`.\nThe resulting dataset is displayed in @fig-cat-dummy.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nset.seed(20170823)\nn_a <- 6\nn_b <- 2\nn_sample <- 3\nsd_A <- 2\nsd_B <- 1\nsd_noise <- 1\ndataset <- expand.grid(\n  B = paste0(\"b\", seq_len(n_a * n_b)),\n  sample = seq_len(n_sample)\n) %>%\n  mutate(\n    A = paste0(\"a\", as.integer(B) %% n_a) %>%\n      factor(),\n    mu = rnorm(n_a, sd = sd_A)[A] + \n         rnorm(n_a * n_b, sd = sd_B)[B],\n    Y = mu + rnorm(n(), sd = sd_noise)\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Dummy dataset with categorical variables.](fixed-and-random-effect_files/figure-html/fig-cat-dummy-1.svg){#fig-cat-dummy width=672}\n:::\n:::\n\n\nThe first model is one that doesn't make sense.\nUsing a categorical variable both as random and a fixed effect.\nIn this case both effects are competing for the same information.\nBelow is the resulting fit from `lme4` and `INLA`.\nNote the warning in the `lme4` output, the model failed to converge.\nNevertheless, both `lme4` and `INLA` yield the same parameter estimate (@fig-cat-fixed), albeit the much wider confidence intervals for `lme4`.\nThe estimates for the random effects in both packages are equivalent to zero (@fig-cat-random).\nAgain the `lme4` estimate has more uncertainty.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lme4)\nmodel.1 <- lmer(Y ~ 0 + A + (1|A), data = dataset)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, :\nunable to evaluate scaled gradient\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, :\nModel failed to converge: degenerate Hessian with 1 negative eigenvalues\n```\n:::\n\n```{.r .cell-code}\nsummary(model.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: Y ~ 0 + A + (1 | A)\n   Data: dataset\n\nREML criterion at convergence: 109.5\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.5304 -0.7336 -0.0650  0.5862  2.2205 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n A        (Intercept) 6.651    2.579   \n Residual             1.576    1.255   \nNumber of obs: 36, groups:  A, 6\n\nFixed effects:\n    Estimate Std. Error t value\nAa0  -4.0282     2.6294  -1.532\nAa1   1.1165     2.6294   0.425\nAa2  -1.2266     2.6294  -0.466\nAa3   2.6855     2.6294   1.021\nAa4   0.4843     2.6294   0.184\nAa5  -2.9922     2.6294  -1.138\n\nCorrelation of Fixed Effects:\n    Aa0   Aa1   Aa2   Aa3   Aa4  \nAa1 0.000                        \nAa2 0.000 0.000                  \nAa3 0.000 0.000 0.000            \nAa4 0.000 0.000 0.000 0.000      \nAa5 0.000 0.000 0.000 0.000 0.000\noptimizer (nloptwrap) convergence code: 0 (OK)\nunable to evaluate scaled gradient\nModel failed to converge: degenerate  Hessian with 1 negative eigenvalues\n```\n:::\n\n```{.r .cell-code}\nlibrary(INLA)\nmodel.2 <- inla(Y ~ 0 + A + f(A, model = \"iid\"), data = dataset)\nsummary(model.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\n   c(\"inla.core(formula = formula, family = family, contrasts = contrasts, \n   \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \" \n   scale = scale, weights = weights, Ntrials = Ntrials, strata = strata, \n   \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose = \n   verbose, \", \" lincomb = lincomb, selection = selection, control.compute \n   = control.compute, \", \" control.predictor = control.predictor, \n   control.family = control.family, \", \" control.inla = control.inla, \n   control.fixed = control.fixed, \", \" control.mode = control.mode, \n   control.expert = control.expert, \", \" control.hazard = control.hazard, \n   control.lincomb = control.lincomb, \", \" control.update = \n   control.update, control.lp.scale = control.lp.scale, \", \" \n   control.pardiso = control.pardiso, only.hyperparam = only.hyperparam, \n   \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads = \n   num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep, \n   working.directory = working.directory, \", \" silent = silent, inla.mode \n   = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame = \n   .parent.frame)\") \nTime used:\n    Pre = 0.629, Running = 0.0513, Post = 0.0194, Total = 0.7 \nFixed effects:\n      mean    sd 0.025quant 0.5quant 0.975quant mode kld\nAa0 -4.027 0.512     -5.038   -4.027     -3.016   NA   0\nAa1  1.116 0.512      0.105    1.116      2.127   NA   0\nAa2 -1.226 0.512     -2.237   -1.226     -0.215   NA   0\nAa3  2.685 0.512      1.674    2.685      3.696   NA   0\nAa4  0.484 0.512     -0.527    0.484      1.495   NA   0\nAa5 -2.991 0.512     -4.002   -2.991     -1.980   NA   0\n\nRandom effects:\n  Name\t  Model\n    A IID model\n\nModel hyperparameters:\n                                            mean       sd 0.025quant 0.5quant\nPrecision for the Gaussian observations 6.76e-01 1.69e-01      0.394 6.59e-01\nPrecision for A                         1.65e+04 1.55e+04   1040.646 1.17e+04\n                                        0.975quant mode\nPrecision for the Gaussian observations       1.06   NA\nPrecision for A                           57850.84   NA\n\nMarginal log-Likelihood:  -91.69 \n is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Comparison of fixed effects parameters for model `A + (1|A)`](fixed-and-random-effect_files/figure-html/fig-cat-fixed-1.svg){#fig-cat-fixed width=672}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Comparison of random effects parameters for model `A + (1|A)`](fixed-and-random-effect_files/figure-html/fig-cat-random-1.svg){#fig-cat-random width=672}\n:::\n:::\n\n\nWhat if we want to add variable `B` as a nested random effect? We already know that adding `A` to both the fixed and the random effects is nonsense.\nThe correct way of doing this is to use `A` as a fixed effect and `B` as an [implicit nested](index.html) random effect.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.1 <- lmer(Y ~ 0 + A + (1|A/B), data = dataset)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, :\nunable to evaluate scaled gradient\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, :\nModel failed to converge: degenerate Hessian with 1 negative eigenvalues\n```\n:::\n\n```{.r .cell-code}\nsummary(model.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: Y ~ 0 + A + (1 | A/B)\n   Data: dataset\n\nREML criterion at convergence: 105.6\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.4004 -0.4931 -0.1464  0.4092  2.1372 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n B:A      (Intercept) 0.7957   0.892   \n A        (Intercept) 1.8676   1.367   \n Residual             1.0983   1.048   \nNumber of obs: 36, groups:  B:A, 12; A, 6\n\nFixed effects:\n    Estimate Std. Error t value\nAa0  -4.0282     1.5648  -2.574\nAa1   1.1165     1.5648   0.714\nAa2  -1.2266     1.5648  -0.784\nAa3   2.6855     1.5648   1.716\nAa4   0.4843     1.5648   0.310\nAa5  -2.9922     1.5648  -1.912\n\nCorrelation of Fixed Effects:\n    Aa0   Aa1   Aa2   Aa3   Aa4  \nAa1 0.000                        \nAa2 0.000 0.000                  \nAa3 0.000 0.000 0.000            \nAa4 0.000 0.000 0.000 0.000      \nAa5 0.000 0.000 0.000 0.000 0.000\noptimizer (nloptwrap) convergence code: 0 (OK)\nunable to evaluate scaled gradient\nModel failed to converge: degenerate  Hessian with 1 negative eigenvalues\n```\n:::\n\n```{.r .cell-code}\nmodel.1b <- lmer(Y ~ 0 + A + (1|B), data = dataset)\nsummary(model.1b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: Y ~ 0 + A + (1 | B)\n   Data: dataset\n\nREML criterion at convergence: 105.6\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-1.4004 -0.4931 -0.1464  0.4092  2.1372 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n B        (Intercept) 0.7957   0.892   \n Residual             1.0983   1.048   \nNumber of obs: 36, groups:  B, 12\n\nFixed effects:\n    Estimate Std. Error t value\nAa0  -4.0282     0.7622  -5.285\nAa1   1.1165     0.7622   1.465\nAa2  -1.2266     0.7622  -1.609\nAa3   2.6855     0.7622   3.523\nAa4   0.4843     0.7622   0.635\nAa5  -2.9922     0.7622  -3.926\n\nCorrelation of Fixed Effects:\n    Aa0   Aa1   Aa2   Aa3   Aa4  \nAa1 0.000                        \nAa2 0.000 0.000                  \nAa3 0.000 0.000 0.000            \nAa4 0.000 0.000 0.000 0.000      \nAa5 0.000 0.000 0.000 0.000 0.000\n```\n:::\n\n```{.r .cell-code}\nmodel.2 <- inla(\n  Y ~ 0 + A + f(A, model = \"iid\") + f(B, model = \"iid\"), \n  data = dataset\n)\nsummary(model.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\n   c(\"inla.core(formula = formula, family = family, contrasts = contrasts, \n   \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \" \n   scale = scale, weights = weights, Ntrials = Ntrials, strata = strata, \n   \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose = \n   verbose, \", \" lincomb = lincomb, selection = selection, control.compute \n   = control.compute, \", \" control.predictor = control.predictor, \n   control.family = control.family, \", \" control.inla = control.inla, \n   control.fixed = control.fixed, \", \" control.mode = control.mode, \n   control.expert = control.expert, \", \" control.hazard = control.hazard, \n   control.lincomb = control.lincomb, \", \" control.update = \n   control.update, control.lp.scale = control.lp.scale, \", \" \n   control.pardiso = control.pardiso, only.hyperparam = only.hyperparam, \n   \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads = \n   num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep, \n   working.directory = working.directory, \", \" silent = silent, inla.mode \n   = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame = \n   .parent.frame)\") \nTime used:\n    Pre = 0.314, Running = 0.0488, Post = 0.015, Total = 0.378 \nFixed effects:\n      mean    sd 0.025quant 0.5quant 0.975quant mode kld\nAa0 -4.027 0.586     -5.184   -4.027     -2.869   NA   0\nAa1  1.116 0.586     -0.041    1.116      2.273   NA   0\nAa2 -1.226 0.586     -2.383   -1.226     -0.069   NA   0\nAa3  2.685 0.586      1.527    2.685      3.842   NA   0\nAa4  0.484 0.586     -0.673    0.484      1.641   NA   0\nAa5 -2.991 0.586     -4.148   -2.991     -1.834   NA   0\n\nRandom effects:\n  Name\t  Model\n    A IID model\n   B IID model\n\nModel hyperparameters:\n                                            mean       sd 0.025quant 0.5quant\nPrecision for the Gaussian observations 8.35e-01 2.55e-01      0.395 8.15e-01\nPrecision for A                         1.86e+04 1.83e+04   1252.960 1.30e+04\nPrecision for B                         2.21e+01 9.25e+01      0.684 6.01e+00\n                                        0.975quant mode\nPrecision for the Gaussian observations       1.38   NA\nPrecision for A                           67459.93   NA\nPrecision for B                             144.50   NA\n\nMarginal log-Likelihood:  -97.26 \n is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n```\n:::\n\n```{.r .cell-code}\nmodel.2b <- inla(Y ~ 0 + A + f(B, model = \"iid\"), data = dataset)\nsummary(model.2b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\n   c(\"inla.core(formula = formula, family = family, contrasts = contrasts, \n   \", \" data = data, quantiles = quantiles, E = E, offset = offset, \", \" \n   scale = scale, weights = weights, Ntrials = Ntrials, strata = strata, \n   \", \" lp.scale = lp.scale, link.covariates = link.covariates, verbose = \n   verbose, \", \" lincomb = lincomb, selection = selection, control.compute \n   = control.compute, \", \" control.predictor = control.predictor, \n   control.family = control.family, \", \" control.inla = control.inla, \n   control.fixed = control.fixed, \", \" control.mode = control.mode, \n   control.expert = control.expert, \", \" control.hazard = control.hazard, \n   control.lincomb = control.lincomb, \", \" control.update = \n   control.update, control.lp.scale = control.lp.scale, \", \" \n   control.pardiso = control.pardiso, only.hyperparam = only.hyperparam, \n   \", \" inla.call = inla.call, inla.arg = inla.arg, num.threads = \n   num.threads, \", \" blas.num.threads = blas.num.threads, keep = keep, \n   working.directory = working.directory, \", \" silent = silent, inla.mode \n   = inla.mode, safe = FALSE, debug = debug, \", \" .parent.frame = \n   .parent.frame)\") \nTime used:\n    Pre = 0.221, Running = 0.0501, Post = 0.0134, Total = 0.284 \nFixed effects:\n      mean    sd 0.025quant 0.5quant 0.975quant mode kld\nAa0 -4.027 0.538     -5.085   -4.027     -2.969   NA   0\nAa1  1.116 0.538      0.058    1.116      2.174   NA   0\nAa2 -1.226 0.538     -2.284   -1.226     -0.168   NA   0\nAa3  2.685 0.538      1.626    2.685      3.743   NA   0\nAa4  0.484 0.538     -0.574    0.484      1.542   NA   0\nAa5 -2.991 0.538     -4.050   -2.991     -1.933   NA   0\n\nRandom effects:\n  Name\t  Model\n    B IID model\n\nModel hyperparameters:\n                                           mean       sd 0.025quant 0.5quant\nPrecision for the Gaussian observations    0.69 2.44e-01      0.258    0.672\nPrecision for B                         1632.05 5.92e+04      0.835   20.320\n                                        0.975quant mode\nPrecision for the Gaussian observations       1.17   NA\nPrecision for B                            5804.06   NA\n\nMarginal log-Likelihood:  -96.54 \n is computed \nPosterior summaries for the linear predictor and the fitted values are computed\n(Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')\n```\n:::\n:::\n\n\n# Discrete variable\n\n## Intro\n\nA discrete variable is a numerical variable but each interval between two values is an integer multiple of a fixed step size.\nTypical examples are related to time, e.g. the year in steps of 1 year, months expressed in terms of years (step size 1/12), ...\n\nWe create a new dummy dataset with a discrete variable.\nThe response variable is a third order polynomial of the discrete variable.\nThe `X` variable is rescaled to -1 and 1.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_x <- 25\nn_sample <- 10\nsd_noise <- 10\ndataset <- expand.grid(\n  X = seq_len(n_x),\n  sample = seq_len(n_sample)\n) %>%\n  mutate(\n    mu =  0.045 * X ^ 3 - X ^ 2 + 10,\n    Y = mu + rnorm(n(), sd = sd_noise),\n    X = (X - ceiling(n_x / 2)) / floor(n_x / 2)\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Dummy dataset with a discrete variable. The line represents the true model.](fixed-and-random-effect_files/figure-html/fig-discrete-dummy-1.svg){#fig-discrete-dummy width=672}\n:::\n:::\n\n\n## Fit with `lme4`\n\nSuppose we fit a simple linear model to the data.\nWe know that this is not accurate because the real pattern is a third order polynomial.\nAnd let's add the variable also as a random effect.\nWe use first `lme4` to illustrate the principle.\n(@fit-discrete-fit) illustrate how the fit of the fixed part is poor but the random effect of X compensates the fit.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.1 <- lmer(Y ~ X + (1|X), data = dataset)\nsummary(model.1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: Y ~ X + (1 | X)\n   Data: dataset\n\nREML criterion at convergence: 1945.2\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.22303 -0.69380 -0.05819  0.60951  2.86201 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n X        (Intercept) 1440.34  37.952  \n Residual               89.42   9.456  \nNumber of obs: 250, groups:  X, 25\n\nFixed effects:\n            Estimate Std. Error t value\n(Intercept)  -20.814      7.614  -2.734\nX             11.927     12.670   0.941\n\nCorrelation of Fixed Effects:\n  (Intr)\nX 0.000 \n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Fitted values (line) and observed values (points) from the lme4 model.](fixed-and-random-effect_files/figure-html/fit-discrete-fit-1.svg){width=672}\n:::\n:::\n\n\nThe overall model fit improves when we add a second and third polynomial term.\nAnd the variance of the random effect decreases.\nIt reduces even to zero once the third polynomial is in the model.\n(@fit-discrete-fit2) illustrates how the fit of the fixed effect improves when adding the higher order terms.\nThe effect on the fitted values with the random effect is marginal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.1b <- lmer(Y ~ X + I(X ^ 2) + (1|X), data = dataset)\nmodel.1c <- lmer(Y ~ X + I(X ^ 2) + I(X ^ 3) + (1|X), data = dataset)\nanova(model.1, model.1b, model.1c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nData: dataset\nModels:\nmodel.1: Y ~ X + (1 | X)\nmodel.1b: Y ~ X + I(X^2) + (1 | X)\nmodel.1c: Y ~ X + I(X^2) + I(X^3) + (1 | X)\n         npar    AIC    BIC  logLik deviance  Chisq Df Pr(>Chisq)    \nmodel.1     4 1965.9 1980.0 -978.96   1957.9                         \nmodel.1b    5 1915.1 1932.7 -952.57   1905.1 52.785  1  3.721e-13 ***\nmodel.1c    6 1839.0 1860.1 -913.48   1827.0 78.176  1  < 2.2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n```\n:::\n\n```{.r .cell-code}\nsummary(model.1b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: Y ~ X + I(X^2) + (1 | X)\n   Data: dataset\n\nREML criterion at convergence: 1890.6\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.2704 -0.6930 -0.0240  0.6078  2.7127 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n X        (Intercept) 174.49   13.210  \n Residual              89.42    9.456  \nNumber of obs: 250, groups:  X, 25\n\nFixed effects:\n            Estimate Std. Error t value\n(Intercept)  -59.180      4.069 -14.546\nX             11.927      4.508   2.646\nI(X^2)       106.245      8.407  12.638\n\nCorrelation of Fixed Effects:\n       (Intr) X     \nX       0.000       \nI(X^2) -0.746  0.000\n```\n:::\n\n```{.r .cell-code}\nsummary(model.1c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLinear mixed model fit by REML ['lmerMod']\nFormula: Y ~ X + I(X^2) + I(X^3) + (1 | X)\n   Data: dataset\n\nREML criterion at convergence: 1816.9\n\nScaled residuals: \n     Min       1Q   Median       3Q      Max \n-2.44536 -0.64673  0.01219  0.65760  3.11117 \n\nRandom effects:\n Groups   Name        Variance  Std.Dev. \n X        (Intercept) 5.966e-13 7.724e-07\n Residual             8.877e+01 9.422e+00\nNumber of obs: 250, groups:  X, 25\n\nFixed effects:\n            Estimate Std. Error t value\n(Intercept)  -59.180      0.895  -66.12\nX            -35.794      2.493  -14.36\nI(X^2)       106.245      1.849   57.45\nI(X^3)        73.574      3.527   20.86\n\nCorrelation of Fixed Effects:\n       (Intr) X      I(X^2)\nX       0.000              \nI(X^2) -0.746  0.000       \nI(X^3)  0.000 -0.917  0.000\noptimizer (nloptwrap) convergence code: 0 (OK)\nboundary (singular) fit: see help('isSingular')\n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Fitted values from the fixed and random part of the `lme4` models. Points represent the true model.](fixed-and-random-effect_files/figure-html/fit-discrete-fit2-1.svg){width=672}\n:::\n:::\n\n\n## Fit with `INLA`\n\n`INLA` requires that we alter the data to get the same output.\nFirst we copy `X` into `X.copy` because `inla` allows the variable to be used only once in the formula.\nFor some reason this wasn't needed with the categorical variables.\nThe `lme4` syntax `X + (1|X)` translates into the following `INLA` syntax: `X + f(X.copy, model = \"iid\")`.\nThen next thing is that `INLA` does the model fitting and prediction in a single step.\nGetting predictions for new data requires to add the new data to the original data while setting the response to `NA`.\nIf we want predictions for the fixed effect only, then we need to add rows were all random effect covariates are set to `NA`.\nHence `X.copy` must be `NA` while `X` must be non `NA`.\nNote that this would be impossible without creating `X.copy`.\n\nLet's fit the three same models with `INLA`.\nThe predictions are given in @fig-discrete-fit3.\nThe results are very similar to the `lme4` results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataset2 <- dataset %>%\n  mutate(X.copy = X) %>%\n  bind_rows(\n    dataset %>%\n      distinct(X, mu)\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.2 <- inla(\n  Y ~ X + f(X.copy, model = \"iid\"), \n  data = dataset2, \n  control.compute = list(waic = TRUE)\n)\nmodel.2b <- inla(\n  Y ~ X + I(X ^ 2) + f(X.copy, model = \"iid\"), \n  data = dataset2, \n  control.compute = list(waic = TRUE)\n)\nmodel.2c <- inla(\n  Y ~ X + I(X ^ 2) + I(X ^ 3) + f(X.copy, model = \"iid\"), \n  data = dataset2, \n  control.compute = list(waic = TRUE)\n)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Fitted values from the fixed and random part of the `INLA` models. Points represent the true model.](fixed-and-random-effect_files/figure-html/fig-discrete-fit3-1.svg){#fig-discrete-fit3 width=672}\n:::\n:::\n\n\n# Continuous variable\n\nA continuous variable is a numeric variable where there is not fixed step size between two values.\nIn practice the step size will be several magnitudes smaller than the measured values.\nAgain let's clarify this with an example dataset.\nFor the sake of simplicity we'll reuse the true model from the example with the discrete variable.\nCompare @fig-continuous-dummy with @fig-discrete-dummy and you'll see that @fig-continuous-dummy has no step size while @fig-discrete-dummy does.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_x <- 25\nn_sample <- 10\nsd_noise <- 10\ndataset <- data.frame(\n  X = runif(n_x * n_sample, min = 1, max = n_x)\n) %>%\n  mutate(\n    mu =  0.045 * X ^ 3 - X ^ 2 + 10,\n    Y = mu + rnorm(n(), sd = sd_noise),\n    X = (X - ceiling(n_x / 2)) / floor(n_x / 2),\n    X.copy = X\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Dummy dataset with a continuous variable. The line represents the true model.](fixed-and-random-effect_files/figure-html/fig-continuous-dummy-1.svg){#fig-continuous-dummy width=672}\n:::\n:::\n\n\nThe `lmer` model fails because the random effect has as many unique values as observations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntryCatch(\n  lmer(Y ~ X + (1|X), data = dataset),\n  error = function(e){e}\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<simpleError: number of levels of each grouping factor must be < number of observations (problems: X)>\n```\n:::\n\n```{.r .cell-code}\nlmer(Y ~ X + (1|X), data = dataset)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError: number of levels of each grouping factor must be < number of observations (problems: X)\n```\n:::\n:::\n\n\nThe `INLA` model yields output but the variance of the random effect is very high.\nA good indicator that there is something wrong.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel.2 <- inla(\n  Y ~ X + f(X.copy, model = \"iid\"), \n  data = dataset, \n  control.compute = list(waic = TRUE)\n)\ninla.tmarginal(\n  function(x){x^-1}, \n  model.2$marginals.hyperpar$`Precision for X.copy`\n) %>%\n  inla.zmarginal()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMean            1376.71 \nStdev           123.447 \nQuantile  0.025 1151.27 \nQuantile  0.25  1290.16 \nQuantile  0.5   1370.45 \nQuantile  0.75  1456.46 \nQuantile  0.975 1635.79 \n```\n:::\n:::\n\n\n## Conclusion\n\nUsing a variable both in the fixed and random part of the model makes only sense in case of a discrete variable.\n\n## Session info\n\nThese R packages were used to create this post.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       Ubuntu 20.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language nl_BE:nl\n collate  nl_BE.UTF-8\n ctype    nl_BE.UTF-8\n tz       Europe/Brussels\n date     2022-08-15\n pandoc   2.18 @ /usr/lib/rstudio/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package      * version    date (UTC) lib source\n assertthat     0.2.1      2019-03-21 [1] CRAN (R 4.2.0)\n backports      1.4.1      2021-12-13 [1] CRAN (R 4.2.0)\n boot           1.3-28     2021-05-03 [1] CRAN (R 4.2.0)\n broom          0.8.0      2022-04-13 [1] CRAN (R 4.2.0)\n cellranger     1.1.0      2016-07-27 [1] CRAN (R 4.2.0)\n cli            3.3.0      2022-04-25 [1] CRAN (R 4.2.0)\n codetools      0.2-18     2020-11-04 [1] CRAN (R 4.2.0)\n colorspace     2.0-3      2022-02-21 [1] CRAN (R 4.2.0)\n crayon         1.5.1      2022-03-26 [1] CRAN (R 4.2.0)\n DBI            1.1.3      2022-06-18 [1] CRAN (R 4.2.0)\n dbplyr         2.2.0      2022-06-05 [1] CRAN (R 4.2.0)\n Deriv          4.1.3      2021-02-24 [1] CRAN (R 4.2.0)\n digest         0.6.29     2021-12-01 [1] CRAN (R 4.2.0)\n dplyr        * 1.0.9      2022-04-28 [1] CRAN (R 4.2.0)\n ellipsis       0.3.2      2021-04-29 [1] CRAN (R 4.2.0)\n evaluate       0.15       2022-02-18 [1] CRAN (R 4.2.0)\n fansi          1.0.3      2022-03-24 [1] CRAN (R 4.2.0)\n farver         2.1.0      2021-02-28 [1] CRAN (R 4.2.0)\n fastmap        1.1.0      2021-01-25 [1] CRAN (R 4.2.0)\n forcats      * 0.5.1      2021-01-27 [1] CRAN (R 4.2.0)\n foreach      * 1.5.2      2022-02-02 [1] CRAN (R 4.2.0)\n fs             1.5.2      2021-12-08 [1] CRAN (R 4.2.0)\n generics       0.1.2      2022-01-31 [1] CRAN (R 4.2.0)\n ggplot2      * 3.3.6      2022-05-03 [1] CRAN (R 4.2.0)\n glue           1.6.2      2022-02-24 [1] CRAN (R 4.2.0)\n gtable         0.3.0      2019-03-25 [1] CRAN (R 4.2.0)\n haven          2.5.0      2022-04-15 [1] CRAN (R 4.2.0)\n hms            1.1.1      2021-09-26 [1] CRAN (R 4.2.0)\n htmltools      0.5.2      2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets    1.5.4      2021-09-08 [1] CRAN (R 4.2.0)\n httr           1.4.3      2022-05-04 [1] CRAN (R 4.2.0)\n INLA         * 22.05.07   2022-05-07 [1] local\n iterators      1.0.14     2022-02-05 [1] CRAN (R 4.2.0)\n jsonlite       1.8.0      2022-02-22 [1] CRAN (R 4.2.0)\n knitr          1.39       2022-04-26 [1] CRAN (R 4.2.0)\n labeling       0.4.2      2020-10-20 [1] CRAN (R 4.2.0)\n lattice        0.20-45    2021-09-22 [1] CRAN (R 4.2.0)\n lifecycle      1.0.1      2021-09-24 [1] CRAN (R 4.2.0)\n lme4         * 1.1-29     2022-04-07 [1] CRAN (R 4.2.0)\n lubridate      1.8.0.9000 2022-05-04 [1] https://inbo.r-universe.dev (R 4.2.0)\n magrittr       2.0.3      2022-03-30 [1] CRAN (R 4.2.0)\n MASS           7.3-57     2022-04-22 [1] CRAN (R 4.2.0)\n Matrix       * 1.4-1      2022-03-23 [1] CRAN (R 4.2.0)\n MatrixModels   0.5-0      2021-03-02 [1] CRAN (R 4.2.0)\n minqa          1.2.4      2014-10-09 [1] CRAN (R 4.2.0)\n modelr         0.1.8      2020-05-19 [1] CRAN (R 4.2.0)\n munsell        0.5.0      2018-06-12 [1] CRAN (R 4.2.0)\n nlme           3.1-158    2022-06-15 [1] CRAN (R 4.2.0)\n nloptr         2.0.3      2022-05-26 [1] CRAN (R 4.2.0)\n pillar         1.7.0      2022-02-01 [1] CRAN (R 4.2.0)\n pkgconfig      2.0.3      2019-09-22 [1] CRAN (R 4.2.0)\n purrr        * 0.3.4      2020-04-17 [1] CRAN (R 4.2.0)\n R6             2.5.1      2021-08-19 [1] CRAN (R 4.2.0)\n Rcpp           1.0.8.3    2022-03-17 [1] CRAN (R 4.2.0)\n readr        * 2.1.2      2022-01-30 [1] CRAN (R 4.2.0)\n readxl         1.4.0      2022-03-28 [1] CRAN (R 4.2.0)\n reprex         2.0.1      2021-08-05 [1] CRAN (R 4.2.0)\n rlang          1.0.3      2022-06-27 [1] CRAN (R 4.2.1)\n rmarkdown      2.14.1     2022-05-04 [1] https://thierryo.r-universe.dev (R 4.2.0)\n rstudioapi     0.13       2020-11-12 [1] CRAN (R 4.2.0)\n rvest          1.0.2      2021-10-16 [1] CRAN (R 4.2.0)\n scales         1.2.0      2022-04-13 [1] CRAN (R 4.2.0)\n sessioninfo    1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n sp           * 1.5-0      2022-06-05 [1] CRAN (R 4.2.0)\n stringi        1.7.6      2021-11-29 [1] CRAN (R 4.2.0)\n stringr      * 1.4.0      2019-02-10 [1] CRAN (R 4.2.0)\n tibble       * 3.1.7      2022-05-03 [1] CRAN (R 4.2.0)\n tidyr        * 1.2.0      2022-02-01 [1] CRAN (R 4.2.0)\n tidyselect     1.1.2      2022-02-21 [1] CRAN (R 4.2.0)\n tidyverse    * 1.3.1      2021-04-15 [1] CRAN (R 4.2.0)\n tzdb           0.3.0      2022-03-28 [1] CRAN (R 4.2.0)\n utf8           1.2.2      2021-07-24 [1] CRAN (R 4.2.0)\n vctrs          0.4.1      2022-04-13 [1] CRAN (R 4.2.0)\n withr          2.5.0      2022-03-03 [1] CRAN (R 4.2.0)\n xfun           0.31       2022-05-10 [1] CRAN (R 4.2.0)\n xml2           1.3.3      2021-11-30 [1] CRAN (R 4.2.0)\n yaml           2.3.5      2022-02-21 [1] CRAN (R 4.2.0)\n\n [1] /home/thierry/R/x86_64-pc-linux-gnu-library/4.0\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [
      "fixed-and-random-effect_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}