{
  "hash": "30f1ab0f0e366a8d74c2afd6748dab08",
  "result": {
    "markdown": "---\ntitle: A git workflow for ecologists\nauthor: Thierry Onkelinx\ndate: \"2017-08-23\"\ncategories: [reproducible research, version control]\nimage: index_files/figure-html/fig-prepare-repo-1.svg\nknitr: \n  opts_chunk: \n    echo: false\n    warning: false\n    message: false\n    fig.width: 6\n    dev: svg\n---\n\n\n# Git\n\nFor those how don't know [git](https://git-scm.com/), it is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.\nI use git daily, including for this [blog](https://github.com/thierryo/my_blog).\nHave a look at [Wikipedia](https://en.wikipedia.org/wiki/Git) for more background.\n\nAlthough it requires some overhead, it saves a lot of time once you get the hang of it.\nWhy?\nBecause you have the confidence that you can go back to any point in the history of a project.\nSo you can explore new things without risking to ruin everything.\nThe new things don't work out? Just go back to the last good point in the history and start over.\n\nEach point in the history is called a `commmit`.\nA `commit` contains all essential information on _what_ needs to change to recreate the current state starting from the previous `commit`.\nIt also contains useful metadata: _who_ created the `commit`, _when_ and _why^[Assuming that the user entered a sensible commit message.]_.\n\nGit works great with plain text files like R scripts, RMarkdown files, data in txt or csv format, ...\nYou can add binary files (Word, Excel, pdf, jpg, ...) to a git project, but not as efficient as plain text files and with less options.\nIn case of a plain text file, git notes which lines in the file are removed and where a line was inserted.\nA change in a line is a combination of removing the old line and inserting the new line.\nHave a look a [this commit](https://github.com/ThierryO/my_blog/commit/fcab2804b75e7848283ef460f945f93aa3538bf5) if you want a real life example.\nSuch granular approach is not available for binary files.\nHence the old version is removed and the new version is added.\n\n# Target audience for this workflow\n\nThe workflow is useful for anyone with basic computer skills.\nThe workflow does not use all whistles and bells available in git.\nOnly the minimal functionality which is all accessible via either a graphical user interface (GUI) or a website.\nWe target ecologists who often write R scripts and have no prior knowledge on version control systems.\n\nThis workflow seems to work for a team of scientists how work on the same project and have all write access to that project (`repository` in git terminology).\n\n# Basic workflow\n\n## Use case\n\n- First `repositories` of git novices.\n- Initial start of a `repository`.\n\nIt is no longer valid as soon as more than one user commits to the `repository`.\n\n## Principle\n\nThe basic workflow is just a simple linear history.\nThe user makes a set of changes and commits those changes.\nThis is repeated over and over until the project is finished.\nThe resulting history will look like @fig-basic.\n\nOne extra step is at least a daily `push` to another machine.\nThis creates (or updates) a copy of the entire project history to that other machine.\nAnd thus serves as a backup copy.\nTherefore this should be done at least daily.\nThe easiest way is to use an on-line service like [GitHub](https://github.com), [Bitbucket](https://bitbucket.com), [GitLab](https://gitlab.com), ...\nGitHub is free for public repositories and is popular for freeware open source projects.\nBitbucket offers free private repositories but only for small teams (max. 5 users).\nHaving the repository on an on-line platform has another benefit: it is easy to share your work and collaborate.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![An example of the history of a basic workflow](index_files/figure-html/fig-basic-1.svg){#fig-basic width=576}\n:::\n:::\n\n\n# Branching workflow with pull requests\n\n## Use case\n\n- Working with several people on the same repository\n- More experienced git users\n\n## Principle\n\n1. Commits are only created in `feature branches`, not in the `master branch`.\n1. Finalised `branches` are `merged` into the `master branch` by `pull requests`.\n\n## Branch\n\nThe [basic workflow](#basic-workflow) has a single `branch` which is called `master`.\nGit makes it easy to create new `branches`.\nA `branch` starts from a specific commit.\nEach user should create a new `branch` when he starts working on a new feature in the repository.\nBecause each user works in his own branch, he is the only one writing to this part of the history.\nThis avoids a lot of conflicts.\n@fig-branching illustrates how the history looks like when a few branches are created.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![An example of a history with a few feature branches](index_files/figure-html/fig-branching-1.svg){#fig-branching width=576}\n:::\n:::\n\n\n## Pull request\n\nCreating branches is fine, but they diverge the history of the repository.\nSo we need a mechanism to `merge` branches together.\nIn this workflow we will work on a feature branch until it is finished.\nThen we merge it into the master branch.\n@fig-pull-request illustrates the resulting history.\nThis can be done locally using a `merge`, but it is safer to do it on-line via a `pull request`.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![An example of a history after two pull requests](index_files/figure-html/fig-pull-request-1.svg){#fig-pull-request width=576}\n:::\n:::\n\n\nA `pull request` is a two step procedure.\nFirst you create the `pull request` by indicating via the webapp which branches you would like to `merge`.\nThe second step is to `merge` the pull request.\nDocumentation on how to handle `pull requests` can be found on the websites of [GitHub](https://help.github.com/articles/about-pull-requests/), [Bitbucket](https://www.atlassian.com/git/tutorials/making-a-pull-request) and [GitLab](https://docs.gitlab.com/ee/gitlab-basics/add-merge-request.html).\n\nPull requests have several advantages over local merges\n\n1. It works only when the branches are pushed to the on-line copy of the repository.\n  This ensures not only a backup but also gives access to the latest version to your collaborators.\n1. All pull requests are done against the common (on-line) master branch.\n  Local merges would create diverging master branches which will create a lot of conflicts.\n1. Since the pull request is a two step procedure, one user can create the pull request and another (e.g. the project leader) can do the actual merge.\n1. The pull request gives an overview of the aggregated changes of all the commits in the pull request.\n This makes it easier to get a feeling on what has been changed within the range of the pull request.\n1. Most on-line tools allow to add comments and reviews to a pull request.\n  This is useful to discuss a feature prior to merging it.\n  In case additional changes are required, the user should update his feature branch.\n  The pull request gets automatically updated.\n\n## Conflicts\n\nConflicts arise when a file is changed at the same location in two different branches and with different changes.\nGit cannot decide which version is correct and therefore blocks the merging of the pull request.\nIt is up to the user to select the correct version and commit the required changes.\nSee on-line [tutorials](https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/) on how to do this.\nOnce the conflicts are resolved, you can go ahead and merge the pull request.\nThis is illustrated in @fig-pull-request.\nFirst `master` is merged back into `feature B` to handle the merge conflict and then `feature B` is merged into `master`.\n\n_What if I choose the wrong version?_ Don't panic, both versions remain in the history so you don't loose any.\nSo you can create a new branch starting for the latest commit with the correct version and merge that branch.\n\n# Flowcharts\n\nHere a a few flowcharts that illustrate several components of the branching workflow with pull requests.\n@fig-prepare-repo illustrates the steps you need when you want to start working on a project.\nOnce you have a local `clone` of the repository you can `check out` the required feature branch (@fig-create-branch).\nThe last flowchart handles working in a feature branch and merge it when finished (@fig-commit).\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Flowchart for preparing a repository.](index_files/figure-html/fig-prepare-repo-1.svg){#fig-prepare-repo width=576}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Flowchart for changing to a feature branch.](index_files/figure-html/fig-create-branch-1.svg){#fig-create-branch width=576}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Flowchart for applying changes in a feature branch.](index_files/figure-html/fig-commit-1.svg){#fig-commit width=576}\n:::\n:::\n\n\n# Rules for collaboration\n\n1. Always commit into a feature branch, never in the master branch.\n1. Always start features branches for the master branch.\n1. Only work in your own branches.\n1. Never merge someone else's pull request without their consent.\n1. Don't wait too long for merging a branch. Keep the scope of a feature branch narrow.\n\n## Exceptions\n\n**Starting branches not from master**\n\nIn case you want to apply a change to someone else's branch. Create a new branch starting from the other's branch, add commits and create a pull request. Ask the branch owner to merge the pull request. Basically you use someone else's branch as the master branch.\n\n**Working with multiple users in the same branch**\n\nThis is OK as long as users don't work simultaneously in the branch. \n\n- Person A create the branch\n- Person A adds commits\n- Person A pushes and notifies person B\n- Person B adds commits\n- Person B pushes and notifies the next person\n- ...\n- Person A creates a pull request\n\n## Session info\n\nThese R packages were used to create this post.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.1 (2022-06-23)\n os       Ubuntu 20.04.4 LTS\n system   x86_64, linux-gnu\n ui       X11\n language nl_BE:nl\n collate  nl_BE.UTF-8\n ctype    nl_BE.UTF-8\n tz       Europe/Brussels\n date     2022-08-15\n pandoc   2.18 @ /usr/lib/rstudio/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version    date (UTC) lib source\n assertthat    0.2.1      2019-03-21 [1] CRAN (R 4.2.0)\n backports     1.4.1      2021-12-13 [1] CRAN (R 4.2.0)\n broom         0.8.0      2022-04-13 [1] CRAN (R 4.2.0)\n cellranger    1.1.0      2016-07-27 [1] CRAN (R 4.2.0)\n cli           3.3.0      2022-04-25 [1] CRAN (R 4.2.0)\n colorspace    2.0-3      2022-02-21 [1] CRAN (R 4.2.0)\n crayon        1.5.1      2022-03-26 [1] CRAN (R 4.2.0)\n DBI           1.1.3      2022-06-18 [1] CRAN (R 4.2.0)\n dbplyr        2.2.0      2022-06-05 [1] CRAN (R 4.2.0)\n diagram     * 1.6.5      2020-09-30 [1] CRAN (R 4.2.0)\n digest        0.6.29     2021-12-01 [1] CRAN (R 4.2.0)\n dplyr       * 1.0.9      2022-04-28 [1] CRAN (R 4.2.0)\n ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.2.0)\n evaluate      0.15       2022-02-18 [1] CRAN (R 4.2.0)\n fansi         1.0.3      2022-03-24 [1] CRAN (R 4.2.0)\n farver        2.1.0      2021-02-28 [1] CRAN (R 4.2.0)\n fastmap       1.1.0      2021-01-25 [1] CRAN (R 4.2.0)\n forcats     * 0.5.1      2021-01-27 [1] CRAN (R 4.2.0)\n fs            1.5.2      2021-12-08 [1] CRAN (R 4.2.0)\n generics      0.1.2      2022-01-31 [1] CRAN (R 4.2.0)\n ggplot2     * 3.3.6      2022-05-03 [1] CRAN (R 4.2.0)\n glue          1.6.2      2022-02-24 [1] CRAN (R 4.2.0)\n gtable        0.3.0      2019-03-25 [1] CRAN (R 4.2.0)\n haven         2.5.0      2022-04-15 [1] CRAN (R 4.2.0)\n hms           1.1.1      2021-09-26 [1] CRAN (R 4.2.0)\n htmltools     0.5.2      2021-08-25 [1] CRAN (R 4.2.0)\n htmlwidgets   1.5.4      2021-09-08 [1] CRAN (R 4.2.0)\n httr          1.4.3      2022-05-04 [1] CRAN (R 4.2.0)\n jsonlite      1.8.0      2022-02-22 [1] CRAN (R 4.2.0)\n knitr         1.39       2022-04-26 [1] CRAN (R 4.2.0)\n labeling      0.4.2      2020-10-20 [1] CRAN (R 4.2.0)\n lifecycle     1.0.1      2021-09-24 [1] CRAN (R 4.2.0)\n lubridate     1.8.0.9000 2022-05-04 [1] https://inbo.r-universe.dev (R 4.2.0)\n magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.2.0)\n modelr        0.1.8      2020-05-19 [1] CRAN (R 4.2.0)\n munsell       0.5.0      2018-06-12 [1] CRAN (R 4.2.0)\n pillar        1.7.0      2022-02-01 [1] CRAN (R 4.2.0)\n pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.2.0)\n purrr       * 0.3.4      2020-04-17 [1] CRAN (R 4.2.0)\n R6            2.5.1      2021-08-19 [1] CRAN (R 4.2.0)\n readr       * 2.1.2      2022-01-30 [1] CRAN (R 4.2.0)\n readxl        1.4.0      2022-03-28 [1] CRAN (R 4.2.0)\n reprex        2.0.1      2021-08-05 [1] CRAN (R 4.2.0)\n rlang         1.0.3      2022-06-27 [1] CRAN (R 4.2.1)\n rmarkdown     2.14.1     2022-05-04 [1] https://thierryo.r-universe.dev (R 4.2.0)\n rstudioapi    0.13       2020-11-12 [1] CRAN (R 4.2.0)\n rvest         1.0.2      2021-10-16 [1] CRAN (R 4.2.0)\n scales        1.2.0      2022-04-13 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2      2021-12-06 [1] CRAN (R 4.2.0)\n shape       * 1.4.6      2021-05-19 [1] CRAN (R 4.2.0)\n stringi       1.7.6      2021-11-29 [1] CRAN (R 4.2.0)\n stringr     * 1.4.0      2019-02-10 [1] CRAN (R 4.2.0)\n tibble      * 3.1.7      2022-05-03 [1] CRAN (R 4.2.0)\n tidyr       * 1.2.0      2022-02-01 [1] CRAN (R 4.2.0)\n tidyselect    1.1.2      2022-02-21 [1] CRAN (R 4.2.0)\n tidyverse   * 1.3.1      2021-04-15 [1] CRAN (R 4.2.0)\n tzdb          0.3.0      2022-03-28 [1] CRAN (R 4.2.0)\n utf8          1.2.2      2021-07-24 [1] CRAN (R 4.2.0)\n vctrs         0.4.1      2022-04-13 [1] CRAN (R 4.2.0)\n withr         2.5.0      2022-03-03 [1] CRAN (R 4.2.0)\n xfun          0.31       2022-05-10 [1] CRAN (R 4.2.0)\n xml2          1.3.3      2021-11-30 [1] CRAN (R 4.2.0)\n yaml          2.3.5      2022-02-21 [1] CRAN (R 4.2.0)\n\n [1] /home/thierry/R/x86_64-pc-linux-gnu-library/4.0\n [2] /usr/local/lib/R/site-library\n [3] /usr/lib/R/site-library\n [4] /usr/lib/R/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}